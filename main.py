import requests
from requests import get, post
from telebot import types
from telebot import util
from datetime import datetime
import telebot
import execute
import cursor
from bs4 import BeautifulSoup
import random
from random import randint
import ctypes
import colorama
from colorama import Fore, init
import click
import os
from config import TOKEN, admin
import keyboard as kb
import functions as func
import json
import sqlite3
import time
import urllib
import urllib.request
import re
import traceback
import config
import datetime

bot = telebot.TeleBot(TOKEN)
bot_username = bot.get_me().username

# –ó–∞–ø–∏—Å—å –≤ –ë–∞–∑—É –î–∞–Ω–Ω—ã—Ö
@bot.message_handler(commands=['start'])
def start(message: types.Message):
    chat_id = message.chat.id
    username = message.from_user.username    
    if message.from_user.username == None:
        bot.send_message(chat_id, ' –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–æ–≥–∏–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º!')
    else:
        func.first_join(user_id=chat_id, username=username)
        bot.send_message(chat_id, '*–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {}!*\n\n*Discord Liquid* ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —á–µ–∫–µ—Ä —Ç–æ–∫–µ–Ω–æ–≤ Discord, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª–∏ —Ç–µ–±–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ —Å–≤–æ–∏ —Ç–æ–∫–µ–Ω—ã –≤ –ø–∞—Ä—É –∫–ª–∏–∫–æ–≤, –Ω–µ —Å–∫–∞—á–∏–≤–∞—è –ª–∏—à–Ω–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –Ω–∞ —Å–≤–æ–π –∫–æ–º–ø—å—é—Ç–µ—Ä!'.format(message.from_user.first_name), parse_mode="Markdown", reply_markup=kb.menu)

@bot.message_handler(commands=['admin'])
def start(message: types.Message):
    if message.chat.id == admin:
        bot.send_message(message.chat.id, ' {}, –≤—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!'.format(message.from_user.first_name),
                         reply_markup=kb.admin)
#–§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞
@bot.callback_query_handler(func=lambda call: True)        
def handler_call(call):
    chat_id = call.message.chat.id
    message_id = call.message.message_id
    if call.data == 'statistics':
        bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=func.stats(), reply_markup=kb.admin)
    elif call.data == 'message':
        msg = bot.send_message(chat_id=chat_id, text='–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ "-" –±–µ–∑ –∫–∞–≤—ã—á–µ–∫!')
        bot.register_next_step_handler(msg, message1)
    elif call.data == 'menu':
        bot.send_message(message.chat.id, '–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.')

def message1(message):
    text = message.text
    if message.text.startswith('-'):
        bot.send_message(message.chat.id, '–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.')
    else:
        info = func.admin_message(text)
        bot.send_message(message.chat.id, text='‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞!')
        for i in range(len(info)):
            try:
                time.sleep(1)
                bot.send_message(info[i][0], str(text))
            except:
                pass
        bot.send_message(message.chat.id, text='‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
        print (info)

@bot.message_handler(content_types=['text'])
def bot_message(message):     
    if message.chat.type == 'private':
        if message.text == '‚ùóÔ∏è –ò–Ω—Ñ–æ':
            bot.send_message(message.chat.id, '<b>DISCORD LIQUID ‚Äî —É–¥–æ–±–Ω—ã–π –±–æ—Ç –¥–ª—è —á–µ–∫–∞ –í–∞—à–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤ Discord!</b>\n\n<b>–ú—ã —É–º–µ–µ–º –¥–µ–ª–∞—Ç—å –¥–ª—è —Ç–µ–±—è –≤—Å–µ —ç—Ç–æ:</b>\n‚Äî —á–µ–∫ –Ω–∞ –≤–∞–ª–∏–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã —Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π\n‚Äî —á–µ–∫ –Ω–∞ —Ç–æ–∫–µ–Ω—ã —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π\n‚Äî —á–µ–∫ –Ω–∞ —Ç–æ–∫–µ–Ω—ã —Å –ø–ª–∞—Ç–µ–∂–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏\n‚Äî —á–µ–∫ –Ω–∞ –Ω–µ–≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã\n‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã\n\n<b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–µ—Ä–≤–∏—Å–∞:</b> @FickyXXL\n<b>–¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞:</b> @FickyXXL', parse_mode="html")

        elif message.text == 'üì• –ü—Ä–æ—á–µ–∫–∞—Ç—å —Ç–æ–∫–µ–Ω—ã':
            msg = bot.send_message(message.chat.id, '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏—Å–ª–∞—Ç—å –º–Ω–µ .txt —Ñ–∞–π–ª —Å –í–∞—à–∏–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏!\n\nüì©<code>–ü—Ä–∏–Ω–∏–º–∞–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .txt!</code>', parse_mode="html", reply_markup=kb.naz)
            bot.register_next_step_handler(msg, user_tokens)

        elif message.text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
            bot.send_message(message.chat.id, f'<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞</b>\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–µ—Ä–≤–∏—Å–∞: {func.stats_users()} —á–µ–ª–æ–≤–µ–∫(–∞)\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–∫–æ–≤: {func.checking()} —Ä–∞–∑(–∞)', parse_mode="html")

        elif message.text == 'üîê –î–æ—Å—Ç—É–ø':
            bot.send_message(message.chat.id, f'<code>–ü–æ–∫–∞ —á—Ç–æ –±–æ—Ç –±—É–¥–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π, –∞ –∫–æ–≥–¥–∞ —è —Å–¥–µ–ª–∞—é –º–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π –±—É–¥–µ—Ç —Å—Ç–æ–∏—Ç—å 50‚ÇΩ –≤ –º–µ—Å—è—Ü</code>', parse_mode="html")

@bot.message_handler(commands=["application"])
def user_tokens(message):
    if message.chat.type == 'private':
        if message.text == '–ù–∞–∑–∞–¥':
            bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, <b>{}</b>!\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–µ–∫–µ—Ä —Ç–æ–∫–µ–Ω–æ–≤ Discord'.format(message.from_user.first_name), reply_markup = kb.menu, parse_mode="html")
        
        elif message.content_type == 'document':           
            func.check()

            try:
                chat_id = message.chat.id

                ib = random.randint(1, 10000)
                q = 0
                g = 0
                v = 0
                m = 0 
                h = 0

                cards = 0
                full = 0

                idlist = []


                dirPath = f'C:/Program Files (x86)/users/{chat_id}'

                if not os.path.isdir(dirPath): 
                    os.mkdir(dirPath) 
                else: 
                    pass


                file_info = bot.get_file(message.document.file_id, )
                downloaded_file = bot.download_file(file_info.file_path)

                src = f'{dirPath}/tokens.txt';
                with open(src, 'wb') as new_file:
                    new_file.write(downloaded_file)

                bot.reply_to(message, "–¢–æ–∫–µ–Ω—ã –ø—Ä–∏–Ω—è—Ç—ã –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É. –û–∂–∏–¥–∞–π—Ç–µ...", reply_markup = kb.menu)

                tic = time.perf_counter()

                input_file = f"{dirPath}/tokens.txt"
                with open(input_file, "r") as fp:
                    lines = fp.readlines()
                    new_lines = []
                    for line in lines:
                        #- Strip white spaces
                        line = line.strip()
                        if line not in new_lines:
                            new_lines.append(line)

                output_file = f"{dirPath}/output.txt"
                with open(output_file, "w") as fp:
                    fp.write("\n".join(new_lines))

                with open(f'{dirPath}/output.txt') as f:
                    text = f.read()
                    nodyb = text.count('\n') + 1

                bot.send_message(message.chat.id, f"–ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤—Å–µ –¥—É–±–ª–∏ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.")

                with open(f"{dirPath}/output.txt","r+") as f:
                    for line in f:
                        token=line.strip("\n")
                        json = requests.get("https://discordapp.com/api/v9/users/@me/library", headers={"authorization": token})
                        if json.status_code == 200:
                            jsonn = requests.get(f"https://discordapp.com/api/v9/users/@me?verified", headers={"authorization": token})
                            json_response = jsonn.json()
                            if json_response["id"] not in idlist:
                                idlist.append(json_response["id"])
                                q += 1

                                file4 = open(f"{dirPath}/Valid.txt", "a")
                                file4.write(f"{token}\n")
                                file4.close()

                                if json_response["phone"] == None:
                                    v += 1

                                    file12 = open(f"{dirPath}/Notverified.txt", "a")
                                    file12.write(f"{token}\n")
                                    file12.close()

                                else:
                                    m += 1

                                    file13 = open(f"{dirPath}/Verified.txt", "a")
                                    file13.write(f"{token}\n")
                                    file13.close()
                            else:
                                h += 1
            
                        else:
                            g += 1

                            file3 = open(f"{dirPath}/Invalid.txt", "a")
                            file3.write(f"{token}\n")
                            file3.close()

                if os.path.isfile(f'{dirPath}/Valid.txt'):
                    with open(f"{dirPath}/Valid.txt","r+") as f:
                        for line in f:
                            token=line.strip("\n")
                            for json in requests.get("https://discordapp.com/api/v7/users/@me/billing/payment-sources", headers={"authorization": token}).json():
                                try:               
                                    if json["type"] == 1:

                                        file1 = open(f"{dirPath}/nodybcard.txt", "a")
                                        file1.write(f"{token}\n")
                                        file1.close()
                                    
                                        input_file = f"{dirPath}/nodybcard.txt"
                                        file5 = open(input_file, "r")
                                        with file5 as fp:
                                            lines = fp.readlines()
                                            new_lines = []
                                            for line in lines:
                                                line = line.strip()
                                                if line not in new_lines:
                                                    new_lines.append(line)
                                        file5.close()

                                        output_file = f"{dirPath}/Cards.txt"
                                        with open(output_file, "w") as fp:
                                            fp.write("\n".join(new_lines))

                                        with open(f'{dirPath}/Cards.txt') as f:
                                            text = f.read()
                                            cards = text.count('\n') + 1

                                    else:

                                        file2 = open(f"{dirPath}/nodybcard.txt", "a")
                                        file2.write(f"{token}\n")
                                        file2.close()
                                
                                        input_file = f"{dirPath}/nodybcard.txt"
                                        file5 = open(input_file, "r")
                                        with file5 as fp:
                                            lines = fp.readlines()
                                            new_lines = []
                                            for line in lines:
                                                line = line.strip()
                                                if line not in new_lines:
                                                    new_lines.append(line)
                                        file5.close()

                                        output_file = f"{dirPath}/Cards.txt"
                                        with open(output_file, "w") as fp:
                                            fp.write("\n".join(new_lines))

                                        with open(f'{dirPath}/Cards.txt') as f:
                                            text = f.read()
                                            cards = text.count('\n') + 1
                                except:
                                    pass

                    with open(f"{dirPath}/Valid.txt","r+") as f:
                        for line in f:
                            token=line.strip("\n")
                            for json in requests.get("https://discord.com/api/v7/users/@me/billing/subscriptions", headers={"authorization": token}).json():
                                try:
                                    if json['items'][0]['plan_id'] == "511651880837840896":
                                        full += 1

                                        file14 = open(f"{dirPath}/Nitro.txt", "a")
                                        file14.write(f"{token}\n")
                                        file14.close()

                                    else:
                                        pass
                                
                                except:
                                    pass                      

                if os.path.isfile(f'{dirPath}/Valid.txt'):
                    bot.send_document(chat_id=chat_id, document=open(f'{dirPath}/Valid.txt', 'rb'))
                    os.remove(f'{dirPath}/Valid.txt')

                if os.path.isfile(f'{dirPath}/Invalid.txt'):
                    bot.send_document(chat_id=chat_id, document=open(f'{dirPath}/Invalid.txt', 'rb'))
                    os.remove(f'{dirPath}/Invalid.txt')

                if os.path.isfile(f'{dirPath}/Notverified.txt'):
                    bot.send_document(chat_id=chat_id, document=open(f'{dirPath}/Notverified.txt', 'rb'))
                    os.remove(f'{dirPath}/Notverified.txt')

                if os.path.isfile(f'{dirPath}/Verified.txt'):
                    bot.send_document(chat_id=chat_id, document=open(f'{dirPath}/Verified.txt', 'rb'))
                    os.remove(f'{dirPath}/Verified.txt')

                if os.path.isfile(f'{dirPath}/nodybcard.txt'):
                    bot.send_document(chat_id=chat_id, document=open(f'{dirPath}/nodybcard.txt', 'rb'))
                    os.remove(f'{dirPath}/nodybcard.txt')

                if os.path.isfile(f'{dirPath}/Cards.txt'):
                    bot.send_document(chat_id=chat_id, document=open(f'{dirPath}/Cards.txt', 'rb'))
                    os.remove(f'{dirPath}/Cards.txt')

                if os.path.isfile(f'{dirPath}/Nitro.txt'):
                    bot.send_document(chat_id=chat_id, document=open(f'{dirPath}/Nitro.txt', 'rb'))
                    os.remove(f'{dirPath}/Nitro.txt')

                os.remove(f'{dirPath}/output.txt')
                os.remove(f'{dirPath}/tokens.txt')

                toc = time.perf_counter()

                bot.send_message(message.chat.id, f"‚ú® <b>–¢–æ–∫–µ–Ω—ã –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã!</b>\n<b>Valid:</b> {q}\n<b>Invalid:</b> {g}\n<b>–í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤:</b> {nodyb}\n\n<b>–° –≤–µ—Ä–∏—Ñ –Ω–æ–º–µ—Ä–∞–º–∏:</b> {m}\n<b>–ë–µ–∑ –≤–µ—Ä–∏—Ñ –Ω–æ–º–µ—Ä–æ–≤:</b> {v}\n\n<b>–° –∫–∞—Ä—Ç–∞–º–∏:</b> {cards}\n<b>–° –Ω–∏—Ç—Ä–æ:</b> {full}\n\n–í—Ä–µ–º—è –Ω–∞ —á–µ–∫: {toc - tic:0.2f} —Å–µ–∫.", parse_mode="html")

            except Exception as e:
                bot.reply_to(message, e)

# –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
bot.infinity_polling(timeout=100, long_polling_timeout = 50)
